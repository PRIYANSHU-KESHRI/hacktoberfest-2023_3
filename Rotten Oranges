Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the earliest time after which all the oranges are rotten. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. 
 

Example 1:

Input: grid = {{0,1,2},{0,1,2},{2,1,1}}
Output: 1
Explanation: The grid is-
0 1 2
0 1 2
2 1 1
Oranges at positions (0,2), (1,2), (2,0)
will rot oranges at (0,1), (1,1), (2,2) and 
(2,1) in unit time.



from collections import deque

def orangesRotting(grid):
    if not grid:
        return 0

    rows, cols = len(grid), len(grid[0])
    fresh_oranges = 0
    rotten = deque()

    # Count fresh oranges and add rotten oranges to the queue
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] == 1:
                fresh_oranges += 1
            elif grid[i][j] == 2:
                rotten.append((i, j))

    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    minutes = 0

    while rotten:
        for _ in range(len(rotten)):
            x, y = rotten.popleft()

            for dx, dy in directions:
                new_x, new_y = x + dx, y + dy

                if 0 <= new_x < rows and 0 <= new_y < cols and grid[new_x][new_y] == 1:
                    grid[new_x][new_y] = 2
                    fresh_oranges -= 1
                    rotten.append((new_x, new_y))

        if rotten:
            minutes += 1

    return minutes if fresh_oranges == 0 else -1

grid = [[0, 1, 2], [0, 1, 2], [2, 1, 1]]
result = orangesRotting(grid)
print(result)
